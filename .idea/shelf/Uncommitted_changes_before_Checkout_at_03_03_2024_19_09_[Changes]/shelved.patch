Index: project-main/Hibernate-JDBC/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jm.task.core.jdbc.dao;\r\n\r\nimport jm.task.core.jdbc.model.User;\r\nimport jm.task.core.jdbc.util.Util;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class UserDaoJDBCImpl implements UserDao {\r\n    public UserDaoJDBCImpl() {\r\n\r\n    }\r\n\r\n   Connection connection = Util.getConnection();\r\n\r\n    public void createUsersTable()  {\r\n\r\n\r\n       try (Statement statement = connection.createStatement()){\r\n           statement.execute(\"CREATE TABLE IF NOT EXISTS users (\" +\r\n\r\n                   \"  id BIGINT NOT NULL AUTO_INCREMENT,\" +\r\n\r\n                   \"  name VARCHAR(50),\" +\r\n\r\n                   \"  lastName VARCHAR(50),\" +\r\n\r\n                   \"  age SMALLINT,\" +\r\n\r\n                   \"  PRIMARY KEY (id));\");\r\n\r\n       }catch (SQLException e){\r\n           e.printStackTrace();\r\n       }\r\n\r\n        System.out.println(\"Table create successful by JDBC\");\r\n    }\r\n\r\n    public void dropUsersTable() {\r\n       try (Statement statement = connection.createStatement()){\r\n\r\n        statement.execute(\"DROP TABLE IF EXISTS users \" );\r\n\r\n    } catch (SQLException e) {\r\n          c\r\n       }\r\n\r\n    }\r\n\r\n    public void saveUser(String name, String lastName, byte age) {\r\n        String save = \" INSERT INTO users (name, lastName, age) values (?,?,?)\";\r\n      try(  PreparedStatement preparedStatement = connection.prepareStatement(save)){\r\n            preparedStatement.setString(1,name);\r\n            preparedStatement.setString(2, lastName);\r\n            preparedStatement.setByte(3,age);\r\n            preparedStatement.executeUpdate();\r\n\r\n      }catch (SQLException e){\r\n          e.printStackTrace();\r\n      }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    public void removeUserById(long id) {\r\n        String removeID = \" DELETE  FROM users where id=? \";\r\n\r\n        try ( PreparedStatement preparedStatement = connection.prepareStatement(removeID )){\r\n            preparedStatement.setLong(1,  id);\r\n            preparedStatement.executeUpdate();\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(\"Error removing users\", e);\r\n        }\r\n\r\n    }\r\n\r\n    public List<User> getAllUsers() {\r\n        User user = new User();\r\n        List <User> userList = new ArrayList<>();\r\n        String getAll = \"SELECT * FROM users \";\r\n\r\n\r\n       try ( Statement statement= connection.createStatement();\r\n        ResultSet resultSet = statement.executeQuery(getAll)){\r\n           while (resultSet.next()) {\r\n               user.setName(resultSet.getString(\"name\"));\r\n               user.setLastName(resultSet.getString(\"lastName\"));\r\n               user.setAge(resultSet.getByte(\"age\"));\r\n               userList.add(user);\r\n           }\r\n\r\n\r\n\r\n       }catch ( SQLException e){\r\n           throw  new RuntimeException(\"Error getting users\",e);\r\n       }\r\n\r\n\r\n\r\n\r\n        return  userList;\r\n    }\r\n\r\n    public void cleanUsersTable() {\r\n\r\n       try ( Statement statement = connection.createStatement()) {\r\n            statement.executeUpdate(\"TRUNCATE TABLE users \");\r\n        } catch (SQLException e){\r\n           throw  new RuntimeException(\"Error cleaning table\", e);\r\n       }\r\n\r\n    }\r\n}\r\n
===================================================================
diff --git a/project-main/Hibernate-JDBC/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java b/project-main/Hibernate-JDBC/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java
--- a/project-main/Hibernate-JDBC/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java	
+++ b/project-main/Hibernate-JDBC/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java	
@@ -43,7 +43,7 @@
         statement.execute("DROP TABLE IF EXISTS users " );
 
     } catch (SQLException e) {
-          c
+           e.printStackTrace();
        }
 
     }
